/**
 * „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
 * „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„ÇíÁµ±‰∏ÄÁöÑ„Å´Âá¶ÁêÜ„Åô„Çã„Åü„ÇÅ„ÅÆ‰∏≠Â§ÆÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
 */

// „Ç®„É©„Éº„Ç≥„Éº„Éâ„ÅÆÂÆöÁæ©
export enum ErrorCode {
  // Ë™çË®ºÈñ¢ÈÄ£
  AUTH_INVALID_CREDENTIALS = 'AUTH_INVALID_CREDENTIALS',
  AUTH_SESSION_EXPIRED = 'AUTH_SESSION_EXPIRED',
  AUTH_UNAUTHORIZED = 'AUTH_UNAUTHORIZED',
  AUTH_EMAIL_ALREADY_EXISTS = 'AUTH_EMAIL_ALREADY_EXISTS',
  
  // FirebaseÈñ¢ÈÄ£
  FIREBASE_CONNECTION_FAILED = 'FIREBASE_CONNECTION_FAILED',
  FIREBASE_PERMISSION_DENIED = 'FIREBASE_PERMISSION_DENIED',
  FIREBASE_QUOTA_EXCEEDED = 'FIREBASE_QUOTA_EXCEEDED',
  FIREBASE_DOCUMENT_NOT_FOUND = 'FIREBASE_DOCUMENT_NOT_FOUND',
  
  // APIÈñ¢ÈÄ£
  API_NETWORK_ERROR = 'API_NETWORK_ERROR',
  API_TIMEOUT = 'API_TIMEOUT',
  API_INVALID_REQUEST = 'API_INVALID_REQUEST',
  API_RATE_LIMIT = 'API_RATE_LIMIT',
  API_SERVER_ERROR = 'API_SERVER_ERROR',
  
  // ÁîªÂÉèÂá¶ÁêÜÈñ¢ÈÄ£
  IMAGE_INVALID_FORMAT = 'IMAGE_INVALID_FORMAT',
  IMAGE_SIZE_TOO_LARGE = 'IMAGE_SIZE_TOO_LARGE',
  IMAGE_PROCESSING_FAILED = 'IMAGE_PROCESSING_FAILED',
  
  // „Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØ
  CARD_DUPLICATE = 'CARD_DUPLICATE',
  CARD_INVALID_DATA = 'CARD_INVALID_DATA',
  CARD_LIMIT_EXCEEDED = 'CARD_LIMIT_EXCEEDED',
  
  // „Åù„ÅÆ‰ªñ
  UNKNOWN_ERROR = 'UNKNOWN_ERROR',
  VALIDATION_ERROR = 'VALIDATION_ERROR'
}

// „Ç´„Çπ„Çø„É†„Ç®„É©„Éº„ÇØ„É©„Çπ
export class BusinessCardError extends Error {
  public readonly code: ErrorCode;
  public readonly statusCode: number;
  public readonly isOperational: boolean;
  public readonly timestamp: Date;
  public readonly context?: Record<string, any>;

  constructor(
    message: string,
    code: ErrorCode = ErrorCode.UNKNOWN_ERROR,
    statusCode: number = 500,
    isOperational: boolean = true,
    context?: Record<string, any>
  ) {
    super(message);
    this.name = 'BusinessCardError';
    this.code = code;
    this.statusCode = statusCode;
    this.isOperational = isOperational;
    this.timestamp = new Date();
    this.context = context;

    // „Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ„Çí‰øùÊåÅ
    Error.captureStackTrace(this, this.constructor);
  }
}

// „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Éû„ÉÉ„Éî„É≥„Ç∞
export const ErrorMessages: Record<ErrorCode, string> = {
  [ErrorCode.AUTH_INVALID_CREDENTIALS]: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì',
  [ErrorCode.AUTH_SESSION_EXPIRED]: '„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÊúüÈôêÂàá„Çå„Åß„Åô„ÄÇÂÜçÂ∫¶„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  [ErrorCode.AUTH_UNAUTHORIZED]: '„Åì„ÅÆÊìç‰Ωú„ÇíÂÆüË°å„Åô„ÇãÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
  [ErrorCode.AUTH_EMAIL_ALREADY_EXISTS]: '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
  
  [ErrorCode.FIREBASE_CONNECTION_FAILED]: '„Çµ„Éº„Éê„Éº„Å∏„ÅÆÊé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  [ErrorCode.FIREBASE_PERMISSION_DENIED]: '„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
  [ErrorCode.FIREBASE_QUOTA_EXCEEDED]: 'Âà©Áî®Âà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
  [ErrorCode.FIREBASE_DOCUMENT_NOT_FOUND]: 'ÊåáÂÆö„Åï„Çå„Åü„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì',
  
  [ErrorCode.API_NETWORK_ERROR]: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  [ErrorCode.API_TIMEOUT]: '„É™„ÇØ„Ç®„Çπ„Éà„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü',
  [ErrorCode.API_INVALID_REQUEST]: 'ÁÑ°Âäπ„Å™„É™„ÇØ„Ç®„Çπ„Éà„Åß„Åô',
  [ErrorCode.API_RATE_LIMIT]: '„É™„ÇØ„Ç®„Çπ„ÉàÊï∞„ÅåÂà∂Èôê„ÇíË∂Ö„Åà„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ',
  [ErrorCode.API_SERVER_ERROR]: '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  
  [ErrorCode.IMAGE_INVALID_FORMAT]: 'ÂØæÂøú„Åó„Å¶„ÅÑ„Å™„ÅÑÁîªÂÉèÂΩ¢Âºè„Åß„ÅôÔºàJPG„ÄÅPNG„ÄÅWEBP„ÅÆ„ÅøÂØæÂøúÔºâ',
  [ErrorCode.IMAGE_SIZE_TOO_LARGE]: 'ÁîªÂÉè„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„ÅôÔºàÊúÄÂ§ß10MB„Åæ„ÅßÔºâ',
  [ErrorCode.IMAGE_PROCESSING_FAILED]: 'ÁîªÂÉè„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
  
  [ErrorCode.CARD_DUPLICATE]: '„Åì„ÅÆÂêçÂà∫„ÅØÊó¢„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
  [ErrorCode.CARD_INVALID_DATA]: 'ÂêçÂà∫ÊÉÖÂ†±„Åå‰∏çÊ≠£„Åß„Åô',
  [ErrorCode.CARD_LIMIT_EXCEEDED]: 'ÂêçÂà∫„ÅÆÁôªÈå≤‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü',
  
  [ErrorCode.UNKNOWN_ERROR]: '‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  [ErrorCode.VALIDATION_ERROR]: 'ÂÖ•ÂäõÂÜÖÂÆπ„Å´Ë™§„Çä„Åå„ÅÇ„Çä„Åæ„Åô'
};

// „Ç®„É©„ÉºÂà§ÂÆö„Éò„É´„Éë„Éº
export const isBusinessCardError = (error: any): error is BusinessCardError => {
  return error instanceof BusinessCardError;
};

// Firebase„Ç®„É©„Éº„Çí„Ç´„Çπ„Çø„É†„Ç®„É©„Éº„Å´Â§âÊèõ
export const fromFirebaseError = (error: any): BusinessCardError => {
  const errorCode = error?.code || '';
  const errorMessage = error?.message || '';
  
  switch (errorCode) {
    case 'auth/user-not-found':
    case 'auth/wrong-password':
    case 'auth/invalid-email':
    case 'auth/invalid-credential':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.AUTH_INVALID_CREDENTIALS],
        ErrorCode.AUTH_INVALID_CREDENTIALS,
        401
      );
    
    case 'auth/email-already-in-use':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.AUTH_EMAIL_ALREADY_EXISTS],
        ErrorCode.AUTH_EMAIL_ALREADY_EXISTS,
        409
      );
    
    case 'permission-denied':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.FIREBASE_PERMISSION_DENIED],
        ErrorCode.FIREBASE_PERMISSION_DENIED,
        403
      );
    
    case 'not-found':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.FIREBASE_DOCUMENT_NOT_FOUND],
        ErrorCode.FIREBASE_DOCUMENT_NOT_FOUND,
        404
      );
    
    case 'resource-exhausted':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.FIREBASE_QUOTA_EXCEEDED],
        ErrorCode.FIREBASE_QUOTA_EXCEEDED,
        429
      );
    
    case 'unavailable':
      return new BusinessCardError(
        ErrorMessages[ErrorCode.FIREBASE_CONNECTION_FAILED],
        ErrorCode.FIREBASE_CONNECTION_FAILED,
        503
      );
    
    default:
      return new BusinessCardError(
        errorMessage || ErrorMessages[ErrorCode.UNKNOWN_ERROR],
        ErrorCode.UNKNOWN_ERROR,
        500,
        true,
        { originalError: errorCode }
      );
  }
};

// API„Ç®„É©„Éº„Çí„Ç´„Çπ„Çø„É†„Ç®„É©„Éº„Å´Â§âÊèõ
export const fromAPIError = (error: any): BusinessCardError => {
  if (error.name === 'AbortError' || error.name === 'TimeoutError') {
    return new BusinessCardError(
      ErrorMessages[ErrorCode.API_TIMEOUT],
      ErrorCode.API_TIMEOUT,
      408
    );
  }
  
  if (error.name === 'NetworkError' || !navigator.onLine) {
    return new BusinessCardError(
      ErrorMessages[ErrorCode.API_NETWORK_ERROR],
      ErrorCode.API_NETWORK_ERROR,
      0
    );
  }
  
  const status = error?.response?.status || error?.status;
  
  switch (status) {
    case 400:
      return new BusinessCardError(
        ErrorMessages[ErrorCode.API_INVALID_REQUEST],
        ErrorCode.API_INVALID_REQUEST,
        400
      );
    
    case 429:
      return new BusinessCardError(
        ErrorMessages[ErrorCode.API_RATE_LIMIT],
        ErrorCode.API_RATE_LIMIT,
        429
      );
    
    case 500:
    case 502:
    case 503:
      return new BusinessCardError(
        ErrorMessages[ErrorCode.API_SERVER_ERROR],
        ErrorCode.API_SERVER_ERROR,
        status
      );
    
    default:
      return new BusinessCardError(
        error?.message || ErrorMessages[ErrorCode.UNKNOWN_ERROR],
        ErrorCode.UNKNOWN_ERROR,
        status || 500
      );
  }
};

// „Ç®„É©„Éº„É≠„ÇÆ„É≥„Ç∞
export const logError = (error: BusinessCardError | Error, additionalContext?: Record<string, any>) => {
  const errorInfo = {
    name: error.name,
    message: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
    ...(isBusinessCardError(error) ? {
      code: error.code,
      statusCode: error.statusCode,
      isOperational: error.isOperational,
      context: error.context
    } : {}),
    ...additionalContext
  };
  
  // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØË©≥Á¥∞„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫Âäõ
  if (process.env.NODE_ENV === 'development') {
    console.error('üî¥ Error logged:', errorInfo);
  }
  
  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂ§ñÈÉ®„Ç®„É©„ÉºËøΩË∑°„Çµ„Éº„Éì„Çπ„Å´ÈÄÅ‰ø°
  // TODO: Sentry, LogRocketÁ≠â„ÅÆÂÆüË£Ö
  
  return errorInfo;
};

// withRetry„ÅØlib/utils/retry.ts„Åã„ÇâÂÜç„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { withRetry } from '@/lib/utils/retry';